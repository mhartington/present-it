/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}


declare global {
  interface HTMLPresentCodeElement extends HTMLStencilElement {
    'lang': string;
  }
  var HTMLPresentCodeElement: {
    prototype: HTMLPresentCodeElement;
    new (): HTMLPresentCodeElement;
  };
  interface HTMLElementTagNameMap {
    'present-code': HTMLPresentCodeElement;
  }
  interface ElementTagNameMap {
    'present-code': HTMLPresentCodeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'present-code': JSXElements.PresentCodeAttributes;
    }
  }
  namespace JSXElements {
    export interface PresentCodeAttributes extends HTMLAttributes {
      'lang'?: string;
    }
  }
}


declare global {
  interface HTMLPresentDeckElement extends HTMLStencilElement {
    'showCount': any;
    'showProgress': any;
  }
  var HTMLPresentDeckElement: {
    prototype: HTMLPresentDeckElement;
    new (): HTMLPresentDeckElement;
  };
  interface HTMLElementTagNameMap {
    'present-deck': HTMLPresentDeckElement;
  }
  interface ElementTagNameMap {
    'present-deck': HTMLPresentDeckElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'present-deck': JSXElements.PresentDeckAttributes;
    }
  }
  namespace JSXElements {
    export interface PresentDeckAttributes extends HTMLAttributes {
      'showCount'?: any;
      'showProgress'?: any;
    }
  }
}


declare global {
  interface HTMLPresentFragmentElement extends HTMLStencilElement {
    'active': boolean;
  }
  var HTMLPresentFragmentElement: {
    prototype: HTMLPresentFragmentElement;
    new (): HTMLPresentFragmentElement;
  };
  interface HTMLElementTagNameMap {
    'present-fragment': HTMLPresentFragmentElement;
  }
  interface ElementTagNameMap {
    'present-fragment': HTMLPresentFragmentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'present-fragment': JSXElements.PresentFragmentAttributes;
    }
  }
  namespace JSXElements {
    export interface PresentFragmentAttributes extends HTMLAttributes {
      'active'?: boolean;
    }
  }
}


declare global {
  interface HTMLPresentMdElement extends HTMLStencilElement {

  }
  var HTMLPresentMdElement: {
    prototype: HTMLPresentMdElement;
    new (): HTMLPresentMdElement;
  };
  interface HTMLElementTagNameMap {
    'present-md': HTMLPresentMdElement;
  }
  interface ElementTagNameMap {
    'present-md': HTMLPresentMdElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'present-md': JSXElements.PresentMdAttributes;
    }
  }
  namespace JSXElements {
    export interface PresentMdAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLPresentSlideElement extends HTMLStencilElement {
    'active': boolean;
    'animation': any;
    'backgroundColor': string;
    'backgroundImage': string;
  }
  var HTMLPresentSlideElement: {
    prototype: HTMLPresentSlideElement;
    new (): HTMLPresentSlideElement;
  };
  interface HTMLElementTagNameMap {
    'present-slide': HTMLPresentSlideElement;
  }
  interface ElementTagNameMap {
    'present-slide': HTMLPresentSlideElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'present-slide': JSXElements.PresentSlideAttributes;
    }
  }
  namespace JSXElements {
    export interface PresentSlideAttributes extends HTMLAttributes {
      'active'?: boolean;
      'animation'?: any;
      'backgroundColor'?: string;
      'backgroundImage'?: string;
      'onSlideDidChange'?: (event: CustomEvent) => void;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
