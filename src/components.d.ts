/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */


declare global {
  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;
  }
}



import {
  Code as RevealCode
} from './components/code/code';

declare global {
  interface HTMLRevealCodeElement extends RevealCode, HTMLStencilElement {
  }
  var HTMLRevealCodeElement: {
    prototype: HTMLRevealCodeElement;
    new (): HTMLRevealCodeElement;
  };
  interface HTMLElementTagNameMap {
    "reveal-code": HTMLRevealCodeElement;
  }
  interface ElementTagNameMap {
    "reveal-code": HTMLRevealCodeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "reveal-code": JSXElements.RevealCodeAttributes;
    }
  }
  namespace JSXElements {
    export interface RevealCodeAttributes extends HTMLAttributes {
      lang?: string;
    }
  }
}


import {
  Deck as RevealDeck
} from './components/deck/deck';

declare global {
  interface HTMLRevealDeckElement extends RevealDeck, HTMLStencilElement {
  }
  var HTMLRevealDeckElement: {
    prototype: HTMLRevealDeckElement;
    new (): HTMLRevealDeckElement;
  };
  interface HTMLElementTagNameMap {
    "reveal-deck": HTMLRevealDeckElement;
  }
  interface ElementTagNameMap {
    "reveal-deck": HTMLRevealDeckElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "reveal-deck": JSXElements.RevealDeckAttributes;
    }
  }
  namespace JSXElements {
    export interface RevealDeckAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  Markdown as RevealMd
} from './components/markdown/markdown';

declare global {
  interface HTMLRevealMdElement extends RevealMd, HTMLStencilElement {
  }
  var HTMLRevealMdElement: {
    prototype: HTMLRevealMdElement;
    new (): HTMLRevealMdElement;
  };
  interface HTMLElementTagNameMap {
    "reveal-md": HTMLRevealMdElement;
  }
  interface ElementTagNameMap {
    "reveal-md": HTMLRevealMdElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "reveal-md": JSXElements.RevealMdAttributes;
    }
  }
  namespace JSXElements {
    export interface RevealMdAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  Slide as RevealSlide
} from './components/slide/slide';

declare global {
  interface HTMLRevealSlideElement extends RevealSlide, HTMLStencilElement {
  }
  var HTMLRevealSlideElement: {
    prototype: HTMLRevealSlideElement;
    new (): HTMLRevealSlideElement;
  };
  interface HTMLElementTagNameMap {
    "reveal-slide": HTMLRevealSlideElement;
  }
  interface ElementTagNameMap {
    "reveal-slide": HTMLRevealSlideElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "reveal-slide": JSXElements.RevealSlideAttributes;
    }
  }
  namespace JSXElements {
    export interface RevealSlideAttributes extends HTMLAttributes {
      active?: boolean;
      backgroundColor?: string;
      backgroundImage?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
